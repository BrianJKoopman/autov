#!/usr/bin/python2
# Brian Koopman
# CCATp specific AutoV class.

import hashlib
from modules.autov import AutoV

class AutoCCATp(AutoV):
    def load_clean_len(self, seq_file):
        """Load a clean optical design.

        This method first checks the md5sums of both optical designs
        (regardless of the chosen one to load. These should never be modified,
        so it's good to check either way.

        The correct copy of the optical design is then setup to be imported to
        CODEV."""
        # Check md5sum of "clean" files to make sure they're clean.
        md5sums = {'Granet_CrDr_Prim6m_F3_20151007_folded_S7_f3000_Ls1860_start_3Dplot_v2.seq':
                   'af2165b5a3a53925441738e3b9be0090',
                   'ccatp_design_bjk_20160812.seq':
                   'ef1457d87b844402a201dde666061c95',
                   'Granet_CrDr_Prim5p5m_F3_20160820_S7_f3210_Ls1345.seq':
                   'b10e35a3a0c1dd753dd5a0866462b489'}

        clean_file_dir = r"E:\ownCloud\ccat\len" + "\\"
        for item in md5sums.keys():
            md5 = hashlib.md5(open(clean_file_dir + item, 'rb').read()).hexdigest()
            if md5 != md5sums[item]:
                raise RuntimeError("The md5sum does not match a known value! \
                      This means a 'clean' file has been modified! Exiting.")
            else:
                print item, "md5sum matches, proceeding"

        text = "! Load a clean copy of the optical design.\n"
        #r'\Granet_CrDr_Prim6m_F3_20151007_folded_S7_f3000_Ls1860_start_3Dplot_v2.seq"' + \
        text += r'in "E:\ownCloud\ccat\len' + \
                r'\%s"'%(seq_file) + \
                "\n"

        self.seq.append(text)
        return text

    def set_strehl_psf(self, file_descriptors):
        """Run the point spread function commands.

        Will output psf results to a tmp file, psf.txt which will be moved by
        the user later for permanent storage."""
        # TODO: make a method for storing temporary files, rather than having
        # the user worry about it.
        # Can't have file name with any .'s other than in .txt
        filename = "psf"
        out_file = "%s%s\\%s_%s"%(self.out_dir, self.date, self.ctime, filename)
        for descriptor in file_descriptors:
            out_file += "_%s"%(descriptor)
        out_file += ".txt"

        text = "! psf with strehl option set\n"
        text += "OUT " + out_file + " ! Sets output file\n"
        text += "! Script generated by PSF GUI interface.\n"
        text += "PSF\n"
        text += "INT STR\n"
        text += "PLO NO\n"
        text += "GO\n"
        text += "OUT T ! Restores regular output\n"
        self.seq.append(text)
        return text

    def remove_receiver(self):
        """Remove receiver definition for tolerancing study.

        For his paper Mike made a receiver looking surface that we don't want
        for the tolerancing analysis.
        """
        text = "! automated glass defintion removal\n"
        surfaces = [11]
        for surface in surfaces:
            text += "DEL S%s\n"%surface
        self.seq.append(text)
        return text

    def run_tolfdif(self, file_descriptors, lens_file):
        """Run the finite difference analysis for tolerancing."""
        # TODO: make a method for storing temporary files, rather than having
        # the user worry about it.
        # Can't have file name with any .'s other than in .txt
        filename = "tolfdif"
        out_file = "%s%s\\%s_%s"%(self.out_dir, self.date, self.ctime, filename)
        for descriptor in file_descriptors:
            out_file += "_%s"%(descriptor)
        out_file += ".txt"

        text = "! tolfdif automation\n"
        text += "OUT " + out_file + " ! Sets output file\n"
        text += "! Script generated by TOLFDIF GUI interface.\n"
        text += "!TOLFDIF\n"
        text += "in cv_macro:tolfdif \"%s\" cv_macro:tolstrehl CV_MACRO:tolcomp YNNN\n"%(lens_file)
        text += "GO\n"
        text += "OUT T ! Restores regular output\n"
        self.seq.append(text)
        return text

    def set_tolerance(self, tolerance, surface, value):
        """Set tolerance for a surface."""
        tolerances = ["DLX", "DLY", "DLZ", "DLT", "DLA", "DLB", "DLG"]
        if tolerance in tolerances:
            text = "! Set tolerance %s for surface %s to %s\n"%(tolerance, surface, value)
            text += "%s S%s V %s\n"%(tolerance, surface, value)
            self.seq.append(text)
        else:
            raise ValueError("Unknown tolerance.")
        return text

    def save_lens(self, filename):
        """Save the lens file to temporary location for running tolfdif."""
        text = "! Save lens file\n"
        text += "SAV \"%s\"\n"%(filename)
        self.seq.append(text)
        return text
